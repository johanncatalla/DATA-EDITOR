import pandas as pd
import csv
import os

class ModelCSV():
    """Model object which contains all methods for the CSV Editor"""
    def __init__(self):
        # Dictionary of {filename: filepath} pair for listbox interaction
        self.path_map = {}
        # Empty Dataframe object for to reset modified dataframe
        self.stored_dataframe= pd.DataFrame()

    def open_csv_file(self, path):
        """reads dataframe from path"""
        df = pd.read_csv(path)
        return df

    def save_csv(self, filename: str): # TODO write treeview
        """create csv writer to save file"""
        file = open(filename, 'w', newline='')
        csv_writer = csv.writer(file)
        return csv_writer
    
    def delete_csv(self, path):
        os.remove(path)

    def row_content(self, dataframe):
        """extracts the contents of the row in the dataframe. excludes heading"""
        df = dataframe.to_numpy().tolist()
        return df

    def col_content(self, dataframe) -> list:
        """returns list of columns in the dataframe"""
        col_lst = list(dataframe.columns)
        return col_lst

    def str_query(self, pairs: dict, dataframe):
        """string query to match the entry with the dataframe

        Args:
            pairs (dict): pairs of {column: value} in the entry box
            dataframe (_type_): dataframe to conduct a query
    
        Returns:
            DataFrame: dataframe containing match result from query
        """
        for col, value in pairs.items():
            # Query expression that checks if the column contains the inputted value
            query_string = f"`{col}`.str.contains('{value}', na=False)"
            # Dataframe generated by query function to evaluate the columns with matched expression
            df = dataframe.query(query_string, engine="python")
        return df
    
    def _parse_drop_files(self, filename: str) -> list:
        """When dropping a file to listbox, removes curly braces on file name 
        when the file has space by taking the string inside the curly braces

        Args:
            filename (str): name of the file can be with or without space

        Returns:
            list: list of filepath names
        """
        size = len(filename)
        res = [] # list of file paths
        name = "" 
        idx = 0
        while idx<size:
            # Creates var j when encountering an opening curly bracket
            if filename[idx] == "{":
                # Start iteration after the curly bracket to take the contents
                j = idx + 1
                # Iterate over string until it reaches closing brace
                while filename[j] != "}":
                    # Append string to the name var
                    name += filename[j]
                    # Increase index position
                    j+=1
                # Append name to list of results
                res.append(name)
                # Resets variables to iterate again
                name=""
                idx=j
            # For single files, append after it reaches space (end of path)
            elif filename[idx]== " " and name != "":
                res.append(name)
                name=""
            # Continue to append while idx val is not a space
            elif filename[idx] != " ":
                name += filename[idx]
            idx+=1
        # Checks the filepath string if there are remaining filepaths
        if name != "":
            # Appends the remaining file path name
            res.append(name)

        return res
    
    def entry_to_pairs(self, entry: str) -> dict:
        """Converts entry sting to a dictionary of {column: value} pairs for listbox access

        Args:
            entry (str): string in the entry box

        Returns:
            dict: contains {column: value} pairs of the entry string
        """
        # Converts the strings separated by comma to list ['country=Philippines', 'year=2020']
        entry_split = entry.split(",")
        # A dictionary to contain entry searches by pair
        pairs = {}
        # Transforms items in list into pairs in the dictionary 
        for pair in entry_split:
            # Splits the value on the equal sign
            pair_split = pair.split("=")
            # Confirms if the list contains two values which will be key and value
            if len(pair_split) == 2:
                col = pair_split[0] # key
                lookup_value = pair_split[1] # val
                # Insert the pair to dictionary
                pairs[col] = lookup_value 
        return pairs